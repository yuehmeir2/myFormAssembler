% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solve.R
\name{to_solve_panels}
\alias{to_solve_panels}
\title{solve an initialized LP object with multiple panels}
\usage{
to_solve_panels(
  lp_obj,
  num_panels,
  timeout = NULL,
  solver = NULL,
  gap = NULL,
  verbose = T,
  across_form_max_item_usage_count = NULL,
  form_skip_usage_count = NULL,
  save_to_file = NULL
)
}
\arguments{
\item{num_panels}{the number of panels desired.}

\item{timeout}{default is 60 seconds}

\item{solver}{"cbc" (default), "symphony", "glpk" and "lpsolve".}

\item{gap}{absolute MIP gap with default = 0}

\item{verbose}{}

\item{lpObj}{the LP object that has been initialized and is ready to be solved.}
}
\value{
the solved lp object; if forms are successfully built, they can be found from formList,
consSummaryList, and formSummaryList under lp_obj.
}
\description{
The constraints are specified for one panel. Then, the constraints are extended
 internally based on num_panels.
}
\examples{
example_name = "MST08_tiny"
num_panels = 15
solver = "cbc"
timeout = 60
gap = 0
verbose = TRUE
lp_obj = myFormAssembler::run_example(example_name, T, timeout, solver, gap, verbose)
lp_obj$output = NULL
lp_obj$x = NULL
lp_obj = to_solve_panels(lp_obj, num_panels, timeout, solver, gap, verbose, across_form_max_item_usage_count = 5)

}
